/* 
   NOTE: this skeleton will help you go through steps 1-3 (some parts are missing for you to work on them!)
   For a better learning, we recomend you take individual parts of this skeleton step-by-step, so that you can see how 
   each part changes the webpage's style as explained in the course website.
*/



/* 
   :root is used to define global CSS variables (custom properties)
   These variables can be reused throughout the stylesheet to maintain consistency
   For examplem we can use :root to define colors
*/
:root {
    --color-accent: oklch(65% 50% 0); /* Primary accent color in OKLCH format */
    --border-gray: oklch(80% 3% 200); /* Gray for borders */
    /* ADD the rest of the color definitions here if needed! */
}



/* STEP 1: Prevent content from getting too wide */
/* 
    Here we can define the base style for the body element. We already added this in Lab 1, but let's complete it!
*/
body {
    /* Set line height to 1.5 times the font size
       and use the OSâ€™s UI font as the website font
     */
    margin-inline: auto;
    padding: 2em;
    font: 100%/1.5 system-ui;
    max-width: 50rem;
}



/* STEP 2: Styling the navigation bar */

/* 
   Step 2.1: Getting <ul> and <li> out of the way
   "display: contents" removes default styling while keeping semantic structure 
   (you do not need to make any changes here for step 2.1, but please take note of it!)
*/
nav ul,
nav li {
    display: contents;
}

/* Step 2.2: Apply Flexbox to the navigation */
nav {
display: flex;  /* Turns nav into a flex container */
/* You will need to continue writing here for step 2.3 */
margin-bottom: 1em;
border-bottom-width: 1px;
border-bottom-style: solid;
border-bottom-color: var(--border-gray);
}  

/* Step 2.3: Style navigation links for each element <a> */
nav a {
    flex: 1;  /* step 2.2 for each element to take the same space  */
    text-decoration: none; /* Remove the underline from the links by setting */
    color: inherit;
    text-align: center;
    padding: 0.5em;
}

    nav a.current {
        border-bottom-width: 0.4em;
        border-bottom-style: solid;
        border-bottom-color: var(--border-gray);
        padding-bottom: -0.4em;
    }

/* 
   Step 2.4: Accent color and hover styles
*/
nav a:hover {
    /* Add here hover effects */
    accent-color: var(--color-accent);
    background-color: oklch(from var(--color-accent) 95% 5% h);
    border-bottom: 0.4em solid var(--color-accent);
    padding-bottom: -0.4em;

}



/*  STEP 3: Contact form layout */

/* Step 3.1: Integrate typography */
    /* (you do not need to make any changes here for step 2.1, but please take note of it!) */
    input,
    textarea,
    button {
        font: inherit; /* Ensures form elements use the same font as the body */
    }
    
/* Step 3.2: Top-down layout */


/* Step 3.3: Grid layout */
    /* 
        Please work on grid layout here.
        NOTE: this will override what you did in the previous step! remember *Specificity*
    */
form {
    display: grid;
    gap: 1em;
    grid-template-columns: auto 1fr;
}

label {
    display: grid;
    grid-template-columns: subgrid;
    grid-column: 1 / 3;
}

button {
    grid-column: 1 / 3;
}

   
   
/* STEP 4: Style your projects page */
/* Step 4.2 */
img {
    max-width: 100%;
    height: auto;
}

/* Step 4.3 */
.projects {
    display: grid;
    gap: 1em;
    grid-template-columns: repeat(auto-fill, minmax(15rem, 1fr));
}

article {
    display: grid;
    grid-template-rows: subgrid;
    grid-row: span 3;

    h2{
        margin: 0;
    }
}



/* STEP 5: Style your CV */

    /* HINT: one thing you could do here is define an ID selector in your resume/index.html -> <section id="resume"> 
                and then you can generate a layour just for your resume
                For example:
    */
    #resume { /* Use this # as your ID selector */ 
        max-width: 50rem;
        /* ... */ 
    }
        
    
        